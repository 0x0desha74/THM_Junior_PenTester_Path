SQL Tutorial (CyberGuy)
=-=-=-=-=-=-=-=-=-=-=-=-
- DATABASE => TABLES => COULMNS & ROWS
VID 1
------

- Sql code is not code sensitive, exeppt the db names
- Each line or block of code must end with ;
- `SELECT VERSION(), NOW(), CURRENT_DATE();` => Output in one table
- `SELECT VERSION(), SELECT NOW(),SELECT CURRENT_DATE();` => Each Output different table  
- \c => Cancel multiple line query

VID 2 
------
# SHOW:
	- `SHOW DATABASES`` 
	- `SHOW TABLES;`
# USE:
	- `USE + db_name` (it can be used without ;)
	
# CREATE:
	`CREATE DATABASE db_name;`
	`CREATE TABLE table_name(fields VARCHAR(33),    ,   );`
# DESCRIBE:
	- used to show the table stractuer => DESCRIBE `table_name;`
# SELECT:
	- `SELECT * FROM table_name;` => Used to show the table content.


# HOW TO INSERT DATA INTO THE DATABASE TABLES:
	1. Manually
		- INSERT INTO table_name VALUES('name', 'gender', 'department', 'dob');
		
	2. Imoprt a file
		- First you need to separat each value in the file with 'tap'.
		- `LOAD DATA INFILE 'file_path' INTO TABLE table_name;`


# VARCHAR Vs CHAR => They are a datatype used to store data in the tables.

- VARCHARE(20) => If the input length = 5 , the input will take just 5-bits 
- CHAR(20) => If the input length = 5 , the input will takw the 20 either, the remain 15 bits will be stored as spaces.

VID 3 
-----
- For editing a field in a coulmn we use UPDATE:
	`UPDATE talbe_name SET field_name=new_data WHERE uname = user_1;`
- For Deleting: 
	`DELETE FROM table_name WHERE uname=user_1;`
- To select a row:
	`SELECT * FROM table_name WHERE uname='user_1;'`
- To select a coulmn:
	`SELECT coulmn_name FROM table_name;`
- For Sorting:
	`SELECT * FROM table_name ORDER BY age;` => will sort the rows by age value (smallest to biggest)
	`SELECT * FROM table_name ORDER BY age DESC;` =>(biggest to smallest)
	 
VID 4
------
# Pattern Matching
	- Start with a certian letter:
		`SELECT * FROM table_name WHERE fname = 'g%';` => will select all fnames started with 'g'.
	- End with a certian letter:		
		`SELECT * FROM table_name WHERE fname = '%g';` => will select all fnames End with 'g'.'.
	- Contain a certian letter:		
		`SELECT * FROM table_name WHERE fname = '%g%';` => will select all fnames contain 'g'.

# Regular Expersions => wide cards
	- Start with a specific letter:
		`SELECT * FROM table_name WHERE fname LIKE REGEXP '^a';` => will select all fnames start with 'a'.
	- End with a specific letter:
		`SELECT * FROM table_name WHERE fname LIKE REGEXP 'a$';` => will select all fnames end with 'a'.
	- contian a specific letter:
		`SELECT * FROM table_name WHERE fname LIKE REGEXP 'a';` => will select all fnames contain 'a'.
	- For selecting all values consists of spesific number of letters:
		`SELECT * FROM table_name WHERE fname REGEXP '^...$';` => will select all values in fname coulmn consists of Three letters, where each letter is repersented  with a dot '.', or we can use '^.{3}$'
		`SELECT * FROM table_name WHERE fname REGEXP '^.{3}$'`
# Boolean Values
	- `SELECT * FROM users WHERE fname ='Ali' OR 1=1;` => Will retrieve the whole table

VID 5
-----
# Boolean Expressions and thier usage:
	- True {1=1} 
	- False{1=0}
	- AND
	- OR
	- NOT => `SELECT * FROM users WHERE NOT uname = 'mustafa';` => retrieving all data except the row whose uname = mustafa

# Comments 
	- using -- => to unactivate a command
# UNION STATEMENT 
	- Used to concatinate two commands
		`SELECT * FROM users WHERE uname = 'user_1' UNION SELECT * FROM users WHERE uname = 'user_2';`


==================
    ALHAMDLLAH
==================
	
