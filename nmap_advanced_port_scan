----------------------------------
- In this room we will cover::
	[] Null scan
	[] Ack scan 
	[] FIN scan 
	[] Xmas scan
	[] Maimon scan
	[] Window scan
	[] Custom scan
-----------------------------------

1. TCP NULL SCAN:
	- null scan is done by sending a TCP packet without any TCP flage set, as expected we will not get any respons if the port is open or filtered by the firewall, but if the port was closed we would get a reply with a RST,ACK TCP flag

	- To perform a NULL scan => `nmap -sN target`

2. TCP FIN SCAN:
	- like the null scan, a TCP packet is sent with a FIN falg set, if the target does not respond this means the port is not closed (open|filtered), but if we got a RST,ACK this indicates that the prot is certainly closed, 

	- TO perform a FIN scan => `nmap -sF target`

	NOTE => {that sometimes firewalls just brop the packet without reply with a RST} 

3. TCP Xmas SCAN:
	- like NULL and FIN scan, in Xmas scan a TCP packet is sent with FIN,PSH,URG, if no reply is received this means the port is open|filterd, but if RST,ACK is recived this indecates that the port is closed.
	
	- To perform a Xmas scan => `nmap -sX target`

NOTE => One scenario where these three scan types can be efficient is when scanning a target behind a stateless (non-stateful) firewall. A stateless firewall will check if the incoming packet has the SYN flag set to detect a connection attempt. Using a flag combination that does not match the SYN packet makes it possible to deceive the firewall and reach the system behind it. However, a stateful firewall will practically block all such crafted packets and render this kind of scan useless.

4. TCP Miamon SCAN:
	- in Miamon scan 2 TCP flags are set (FIN/ACK), we expect a RST reply if the port is closed, some  old systems wuold  drop the packet if the port is open, but now this type of scan is not used but you better know its concept

	-To perform a Miamon scan => `nmap -sM target`
	- note that you will got nothing if you try it in modern systems 

5. TCP ACK SCAN:
	- in ACK scan, A TCP packet is sent with an ACK falg, we expect getting a RST as a response regardless the state of the port, but in case there is firewall in front of the target, we would know which ports are open.

	- this scan can be used to discover firewall rules sets and configuration.
	- in case you perform an ACK scan and got 3 ports open, this means that the firewall is blocking all ports exept these three ones.
	- TO perform an ACK sccn =>`nmap -sA target`

6. TCP Window SCAN:
	- window field => thia flag is used by the receiver to indecate to the sender the amount of data that it is able to accept.
	- simmiler to the ACK scan, in window scan a TCP ACK packet is sent to the target, we expect to get a RST packet, by examining the window field in the responsse RST packet we can indecate the port is open or not

	- To perform a Window scan =`nmap -sW target`
	- note that this scan work if there is a firewall in front of the target.
	- note that in ACK scan the result was <unfiltered> , and in window scan the result is <closed>, in the two cases we indecate that the ports is not closed and not bloked by the firewall {assume there is a firewall}.

NOTE => Finally, it is essential to note that the ACK scan and the window scan were very efficient at helping us map out the firewall rules. However, it is vital to remember that just because a firewall is not blocking a specific port, it does not necessarily mean that a service is listening on that port. For example, there is a possibility that the firewall rules need to be updated to reflect recent service changes. Hence, ACK and window scans are exposing the firewall rules, not the services.

7. Custom TCP  SCAN:
	- You can perform your own custom TCP scan using => --scanflags <flags>
		for  example => `nmap --scanflags RSTSYNFIN target`
---------------------------------------------------------
[] Spoofing & Decoy:
	- Spoofing the IP whilc scanning a target using `-S <spoofed_IP>`
	- this scan can not be done unless the attacker can monetor the network traffic to analyse the responses sent to the spoofd IP (dest_IP).
	- To spoof an IP => `nmap -S <spoofed_ip> -e NIC -Pn <target_ip> `
	- spoofing the MAC address works only when the attacjer and the target are in the same network.=>`nmap --spoof-mac <spoofed_mac> <target_ip>`
NOTE =>that spoofiing  ip and mac needs certain conditions and not working always, so attackers 

[] Decoy:
	- The prenciple of the decoying is simple, you make the nmap send the request from multiple IP addresses so that the target machine cannot know which one belongs to the attacker.
	- To perform a decoying attack => `nmap -D 10.10.10.12,10.10.12.12,RND,RND,ME 10.10.10.131`
	- lets explain the command above in detail:
		-D =>  to specify the Source IP addresses
		RND => random ip the nmap will choose and it will be changed everytime you run the attack.
		ME => the attacker's IP 
	- Note that you can specify IP address and you can use RND to make the nmap choose random values for you.
-------------------------------------------------------------
[] Fragmented Packets:
	- Firewall => Piece of  softeare or hardware that permits packets to pass through or blocks them,It functions based on firewall rules, summarized as blocking all traffic with exceptions or allowing all traffic with exceptions. 

	- IDS (Intrusion Detection System) => An intrusion detection system (IDS) inspects network packets for select behavioural patterns or specific content signatures. It raises an alert whenever a malicious rule is met. In addition to the IP header and transport layer header, an IDS would inspect the data contents in the transport layer and check if it matches any malicious patterns. How can you make it less likely for a traditional firewall/IDS to detect your Nmap activity? It is not easy to answer this; however, depending on the type of firewall/IDS, you might benefit from dividing the packet into smaller packets.
	- Nmap provides the option -f to fragment packets. Once chosen, the IP data will be divided into 8 bytes or less. Adding another -f (-f -f or -ff) will split the data into 16 byte-fragments instead of 8. You can change the default value by using the --mtu; however, you should always choose a multiple of 8.
	To properly understand fragmentation, we need to look at the IP header in the figure below. It might look complicated at first, but we notice that we know most of its fields. In particular, notice the source address taking 32 bits (4 bytes) on the fourth row, while the destination address is taking another 4 bytes on the fifth row. The data that we will fragment across multiple packets is highlighted in red. To aid in the reassembly on the recipient side, IP uses the identification (ID) and fragment offset, shown on the second row of the figure below.
	- To fragment a packet => `sudo nmap -sS -f target`
----------------------------------------------------------------
[] Idle/Zombie SCAN:
	- in idle scan we need a third party (idle/zombie) to complete the scan,
		1. The attacker send a TCP packet with SYN to the third party to know the IP ID .
		2. A TCP packet is sent to the target with a source IP of the third party.
		3. the target should reply to the third party as a destination, if done,the IP ID will increase by 1 .
		4. so the attacker sent a TCP packet to the third party again and compare the IP ID of the first request by the current IP ID:
			- if the difference is 1, this indecates  that the target didn't respond to the third party so the port is closed.
			- if the  difference is  2, this indecates that the target responded to the third party which means the port is open.
	=> NOTE that the target might not respond to the third party due to a firewall rules, this also give us a hint that the port is closed.
	=> NOTE that the third party should not be busy, so we can do the scan 

	- Too perfoem an idle/zombie scan => `sudo nmap -sI <zombi_ip> <target_ip>`
--------------------------------------------------------------
[] NOTES:
	--reason => to got more details 
	- Providing the --reason flag gives us the explicit reason why Nmap concluded that the system is up or a particular port is open. 
	-d or -dd => for debugging detailes 
	-v or -vv for more details 

==========================================================
-sN => TCP NUll scan 
-sS => TCP SYN  scan
-sA => TCP ACK scan
-sT => TCP connect scan
-sW => TCP window scan
-sF  => TCP FIN scan
-sX => TCP Xmas scan
-sM => TCP Miamon scan
-sI => Idle/Zombiee scan
--scanflags <flags> => TCP Custom scan
sudo nmap  -S <spoofed_IP> <target_ip>
--spoof-mac <spoofed_mac>
nmap -D <DECOY_IP,ME> <target_ip>
-f => Fragment IP data into 8 bytes
--f => Fragment IP data into 8*2 bytes
-v => verbose for details
-vv => for more detials
-d => debuggiing details
-dd => more debugging details
--source-port <PORT_NUM> => specifh a source port number
--reason => gives us the explicit reason why Nmap concluded that the system is up or a particular port is open
--data-length NUM => append random data to reach givin length
=========================================================


Alhamdullah